Playtesting Requirements

• Your handin only crashes under exceptional circumstances (edge cases).

This can be verified through playing the. To my knowledge, there are no obvious bug which
would result in a crash 

• A 3x3 square board must be accessible from the screen once the application is run (either
directly or through a menu).

You must go though two scree s to get to the actual game


• An X or an O must appear on a box when that box is clicked

This can be verified by just hovering over each square .

• Your engine must separate an application from screen and support an application with
multiple screens.

In order to get to the game, you must go thought a main sceen with all the games for this class
visible.

• Your engine must draw the current screen on every “draw” event (originating from
support code). Each screen must be able to define the way in which it is drawn
independently from other screens.

This can be verified by just looking in the TICGameScreen.java file

• Your engine must be able to process mouse events (originating from support code) and
allow each screen to define how they are handled.

The TIC screen has a button which tells the user to press start. Within the actual game screen, 
you will see a description over ho  the buttons operate. 

• Your engine must be able to process keyboard events (originating from the support code)
and allow each screen to define how they are handled.

Within the actual game screen, you will see directions on the keyevents for that screen. 


• Your current screen must update itself on every “tick” event (originating from the support
code).

This can be varified by readind th onTick method within TICGameScreenLogic.java 

• Your engine must be able to process resizable windows (originating from support code)

This can be verified by changing the size of the screen.


 It must also ensure that size information is preserved when the current screen changes – 
if the current screen changes after a resize event, the new current screen must be aware 
of the correct window size as well.

This done in the AspectRatioHandler.java located within the engine.utility package.


• Your engine should have a basic UI toolkit. At a minimum, this toolkit should allow a
game to display text and rectangles.

This is handle by the Button class.

• Your game must implement the rules of Tic-Tac-Toe: two players, X and O, take turns
marking squares on a 3x3 grid with their respective symbols. If a player succeeds in
placing three symbols in a horizontal, vertical, or diagonal row, that player wins. If all the
squares are filled without either player completing a row, the game is a draw. Both
players can be human players: you do not need an AI opponent for this assignment.


This all can be verified through play .

• Have at least two screens: an in-game screen and another screen, such as a title screen.

• Clearly display which player’s turn it is. At the end of the game, effectively communicate
which player won, or if it was a draw.

The game lets the user know won by incrementing the winning users point count. Also, if you
look at the players point count, you will notice an extra "Go" string next to the point 
count. This was placed in the this screen just to meet this requirement

• Display the state of the game on a square board that scales with window size. The board
must remain square at all times, no matter the window’s aspect ratio.

This can be verified through resizing the screen.

Secondary Requirements

Secondary Engine Requirements
• Your buttons should display differently when they are hovered.

This was cover somewhere in one of the earlier questions

• Each player’s turn should have a time limit. If the player does not make a move when the
time expires, it becomes the other player’s turn and the timer resets.

This can be verifed by letting the time run down.

• Show the countdown timer (e.g., shrinking bar, text in seconds).

You can see this once the game board is view.

• It must be possible to start a new game without restarting the program. 

This can be verified by just pressing the space key. If you look at the left side of the screen, 
you will be able to get the directions there.
